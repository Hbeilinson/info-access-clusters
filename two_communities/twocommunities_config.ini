;DO NOT USE FOLLOWING CHARACTERS IN KEYNAMES: ?{}|&~![()^"
[GENERAL]
;basic (yes/no), if yes two communities using basic model
;              , if yes must provie intraNodes, interNodes
basic = no
;SBM (yes/no), if yes two communities built using Stochastic Block Model
SBM = yes
;            , if yes must provie intraNodes AND interNodes
;LFR (yes/no), if yes two communities built using LFR benchmark
;            , if yes must provide aveDegree, maxDegree, mixingParameter
LFR = no
;removeNode (yes/no) if yes, must EITHER provide probability of removing node in probRemoveA and probRemoveB
; 			          OR provide number of nodes to remove in numRemoveA and numRemoveB
removeNode = yes
;nodeList (yes/no) if yes, generate node list
nodeList = yes
;edgeList (yes/no) if yes, generate edge list
edgeList = yes
;neighborsList (yes/no) if yes, generate neighbors list
neighborsList = yes
;seedEdgelist (yes/no) if yes, must EITHER provide probability of being a seed in probSeedA and probSeedB
; 				    OR provide number of seed nodes in numSeedA and numSeedB
seedEdgelist = yes

[SETTINGS]
;size (int) number of nodes in one community (community of equal sizes)
size = 1000
;intraNodes (float) probability of sharing info within each community
intraNodes = 0.01
;interNodes (float) probability of sharing info between the communities
interNodes = 0.0001
;aveDegree (int)
aveDegree = 20
;maxDegree (int)
maxDegree = 50
;mixingParameter (float)
mixingParameter = 0.3
;probRemoveA (float) probability of node being removed in first community
probRemoveA = 
;probRemoveB (float) probability of node being removed in second community
probRemoveB = 
;numRemoveA (int) number of nodes removed in first community
numRemoveA = 0
;numRemoveB (int) number of nodes removed in second community
numRemoveB = 100
;probSeedA (float) probability of node being a seed in first community
probSeedA = 0.3
;probSeedB (float) probability of node being a seed in second community 
probSeedB = 0.3
;numSeedA (int) number of seed nodes in first community
numSeedA = 
;numSeedB (int) number of seed nodes in second community
numSeedB =

[FILES]
;inEdgesFile (path to input edgelist)
inEdgesFile = twocommunities_edgelist.txt
;inNodesFile (path to input nodelist)
inNodesFile = twocommunities_nodelist.txt
;neighborsFile (path to input list of neighbors per node)
neighborsFile = twocommunities_neighbors.txt
; inSeedEdgesFile (path to input edgelist with seeds)	
inSeedEdgesFile = twocommunities_seed_edgelist.txt

